Algorithm:
problem 1:
https://leetcode-cn.com/problems/palindrome-number/
solution 1:
class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0)
            return false;
        string str = to_string(x);
        for(int i = 0,j = str.size() - 1;i < j;i++,j--){
            if( str[i] != str[j] )
                return false;
        }
        return true;
    }
};
solution2 : 
class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0)
            return false;
        vector<int> ivec;
        int temp = 0;
        while(x <= 0){
            temp = x % 10;
            x /= 10;
            ivec.push_back(temp);
        }
        int i,j;
        for(i = 0,j = ivec.size() - 1;i < j;i++,j--){
            if(ivec[i] != ivec[j]){
                return false;
            }
        }
        return true;
    }
};
problem 2:
https://leetcode-cn.com/problems/container-with-most-water/submissions/
solution 1:
class Solution {
public:
    int maxArea(vector<int>& height) {
        if(height.empty())
            return 0;
        int maxArea = 0;
        for(int i = 0;i < height.size();i++){
            for(int j = i + 1;j < height.size();j++){
                int width = j - i,length = 0,area = 0;
                if(height[i] > height[j]){
                    length = height[j];
                }else{
                    length = height[i];
                }
                area = width * length;
                if(area > maxArea){
                    maxArea = area;
                }
            }
        }
        return maxArea; 
    }
};

Review:

Tip:

Share:


