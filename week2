Algorithm:
https://leetcode-cn.com/problems/median-of-two-sorted-arrays/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double median;
        // nums1 is empty
        if(nums1.empty())
        {
            int len2 = nums2.size();
            if(nums2.size() % 2 == 0)
            {
                median = (double)(nums2[len2 / 2 - 1] + nums2[len2 / 2]) / 2;
            }
            else
            {
                median = nums2[len2 / 2];
            }
            return median;
        }
        //nums2 is empty
        else if(nums2.empty()){
            int len1 = nums1.size();
            if(nums1.size() % 2 == 0)
            {
                median =(double)(nums1[len1 / 2 - 1] + nums1[len1 / 2]) / 2;
            }
            else
            {
                median = nums1[len1 / 2];
            }
            return median;
        }
        median = mergeArray(nums1,nums2);
        return median;
    }
    //merge two array 
    double mergeArray(vector<int>& arr1,vector<int>& arr2)
    {
        double result;
        vector<int> mergeArray;
        vector<int>::iterator beg1 = arr1.begin(),end1 = arr1.end();
        vector<int>::iterator beg2 = arr2.begin(),end2 = arr2.end();
        while(beg1 != end1 && beg2 != end2)
        {
            if( *beg1 < *beg2)
            {
                mergeArray.push_back(*beg1);
                beg1++;
            }
            else
            {
                mergeArray.push_back(*beg2);
                beg2++;
            }
        }
        while(beg1 != end1)
        {
            mergeArray.push_back(*beg1);
            beg1++;
        }
        while(beg2 != end2)
        {
            mergeArray.push_back(*beg2);
            beg2++;
        }
        if(mergeArray.size() % 2 == 0)
        {
            result =(double) (mergeArray[mergeArray.size() / 2 - 1] + mergeArray[mergeArray.size() / 2]) / 2;
        }
        else
        {
            result = mergeArray[mergeArray.size() / 2];
        }
        return result;
    }
};

Review:

Tip:

Share:
