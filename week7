Algorithm
https://leetcode-cn.com/problems/min-stack/
class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        iv = new vector<int>();
    }
    
    void push(int x) {
        iv->push_back(x);
    }
    
    void pop() {
        iv->pop_back();
    }
    
    int top() {
        return iv->front();
    }
    
    int getMin() {
          auto it = iv->begin();
          int minElement = (*it);
          for(it = it + 1; it != iv->end(); it++){
              if((*it) < minElement)
                 minElement = (*it);
          }
          return minElement;
    }
private:
    vector<int> *iv;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> is;
        set<string> ss = {"+","-","*","/"};
        for(int i = 0; i < tokens.size(); i++){
            if( ss.find(tokens[i]) == ss.end() ) {
                 int temp = stoi(tokens[i]);
                 is.push(temp);
            }else if( tokens[i] == "+" && is.size() > 1 ){
                  int tempSecond = is.top();
                  is.pop();
                  int tempFirst = is.top();
                  is.pop();
                  tempFirst += tempSecond;
                  is.push(tempFirst);
            }else if( tokens[i] == "-" && is.size() > 1 ){
                 int tempSecond = is.top();
                  is.pop();
                  int tempFirst = is.top();
                  is.pop();
                  tempFirst -= tempSecond;
                  is.push(tempFirst);
            }else if( tokens[i] == "*" && is.size() > 1 ){
                  int tempSecond = is.top();
                  is.pop();
                  int tempFirst = is.top();
                  is.pop();
                  tempFirst *= tempSecond;
                  is.push(tempFirst);
            }else if( tokens[i] == "/" && is.size() > 1 ){
                  int tempSecond = is.top();
                  is.pop();
                  int tempFirst = is.top();
                  is.pop();
                  tempFirst /= tempSecond;
                  is.push(tempFirst);
            }
        }
        return is.top();
    }
};
https://leetcode-cn.com/problems/next-greater-element-i/
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
          vector<int> resultArray;
          for(int i = 0; i < nums1.size(); i++){
               if(nums2.find(nums1[i]) != nums2.end()){
                   vector<int>::iterator start = nums2.find(nums1[i]) + 1;
                   while(start < nums2.end()){
                       if( *start > nums1[i] ){
                           break;
                       }
                   }
                   if

               }
          }
    }
};

Review

Tip

Share
