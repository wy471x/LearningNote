Algorithm
problem 1
https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/submissions/
volience solution : O(n)
class Solution {
public:
    int findMin(vector<int>& nums) {
        int min = nums[0];
        for(int i = 0; i < nums.size(); i++){
            if(min > nums[i])
                min = nums[i];
        }
        return min;
    }
};
binary solution : O(logn)
class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size() == 1 || nums[0] < nums[nums.size() - 1])
            return nums[0];
        int low = 0, high = nums.size() - 1;
        while(low <= high){
            int mid = (low + high) / 2;
            if(nums[mid] > nums[mid + 1])
                return nums[mid + 1];
            if(nums[mid] < nums[mid - 1])
                return nums[mid];
            if(nums[mid] > nums[0])
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
    }
};
problem 2
https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/submissions/
Complexity Anlysis: Time O(n^2) Space O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
                    vector<int> result;
                    for(int i = 0; i < numbers.size(); i++){
                        for(int j = i + 1; j < numbers.size(); j++){
                            if(numbers[i] + numbers[j] == target){
                                result.push_back(i + 1);
                                result.push_back(j + 1);
                            }
                        }
                    }
                    return result;
    }
};
Complexity Anlysis : Time O(logn) Space O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
                int low = 0, high = numbers.size() - 1;
                while(low < high){
                    if(numbers[low] + numbers[high] > target)
                        high--;
                    else 
                        if(numbers[low] + numbers[high] < target)
                            low++;
                        else
                            return vector<int>({low + 1, high + 1});
                }

                return vector<int>({-1,-1});
    }
};
problem 3:
https://leetcode-cn.com/problems/remove-element/submissions/
Complexity Anlysis: Time O(n) , Space O(1) 
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
            for(auto it = nums.begin(); it != nums.end();){
                if(*it == val)
                    it = nums.erase(it);
                else
                    it++;
            }
            return nums.size();
    }
};

Review

Tip

Share
