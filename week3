Algorithm:
problem 1:
https://leetcode-cn.com/problems/reverse-integer/
class Solution {
public:
    int reverse(int x) {
        string temporaryString = to_string(x);
        string resultString;
        int i = temporaryString.size() - 1;
        long resultNumber;
        if(x < 0){
        while(i > 0){
            resultString.push_back(temporaryString[i]);
            i--;
        } 
        resultNumber = -stol(resultString);
        }else{
            while(i >= 0){
                resultString.push_back(temporaryString[i]);
                i--;
            }
            resultNumber  = stol(resultString);
        }
        if(resultNumber >INT_MAX || resultNumber < INT_MIN)
        {
            return 0;
        }
        
        return (int)resultNumber;
    }
};
problem 2:
https://leetcode-cn.com/problems/string-to-integer-atoi/
solution1: 自己写的超时
class Solution {
  public:
    int myAtoi(string str) {
         if(str.empty())
            return 0;
         char flag = ' ';
         vector<int> storeNumber;
         if(firstIsNumber(str)){
             int i = 0;
             while(i < str.size()){
                 if(isspace(str[i])){
                     i++;
                 }else{
                     break;
                 }
             }
             if(str[i] == '-'){
                 flag = str[i];
             }else if(str[i] == '+'){
                 flag = str[i];
             }
             for(i=i+1;i < str.size();i++){
                 if(isdigit(str[i])){
                     storeNumber.push_back(str[i] - '0');
                 }else{
                     break;
                 }
             }
             long resultNumber = 0;
             int position = storeNumber.size() - 1;
             int index = 0;
             while(position >= 0){
                 resultNumber += storeNumber[index] * pow(10,position);
                 index++;
             }
             if(flag == '-' ){
                 resultNumber = -resultNumber;
             }
             if( resultNumber > INT_MAX){
                 return INT_MAX;
             }else if( resultNumber < INT_MIN){
                 return INT_MIN;
             }else{
                 return (int)resultNumber;
             }
             
         }else{
             return 0;
         }   
    }
    //judge first number whether it is a number.
    bool firstIsNumber(string str){
        int i = 0;
        while( i < str.size()){
            if(isspace(str[i]) || 
               str[i] == '+' || 
               str[i] == '-')
            {
                i++;
            }else if(isdigit(str[i]))
                  {
                         break;
                  }else{
                         return false;
                  }
        }
        if(i == str.size()){
            return false;
        }
        return true; 
    }
};
solution2：简便方法，利用string流
class Solution {
  public:
    int myAtoi(string str) {
        int d = 0;
        istringstream iss(str);
        iss >> d;
        return d;   
    }
   
};

Review:
https://medium.com/netflix-techblog/delta-a-data-synchronization-and-enrichment-platform-e82c36a79aee
这是一篇有关Netflix自己开发的数据同步与改进平台，具体细节设计很多具有很大的价值。由于自己工作内容相关性不多，有好多技术
还不知晓，感觉自身要学习的东西太多。

Tip:
不得不说一个好的代码阅读工具对于自己开发而言是具有重要意义的。面对大量的代码，你需要去对应不同的功能，通过代码阅读工具可以
很好的帮助到你。这里我想推荐一些比较的代码阅读工具：Sourceinsight、SlickEdit等，只能说是各有各的特色。

Share:
由于自己平时会涉及到Android开发，所以这里可以分享一些有关android调试方面的技巧
在这里放上官网调试的文档链接如下：
https://developer.android.com/reference/android/util/Log


