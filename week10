Algorithm
problem 1:
https://leetcode-cn.com/problems/sort-list/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if( head == nullptr || head->next == nullptr)
            return head;
        // cut 
        ListNode *fast = head->next;
        ListNode *slow = head;
        while( fast != nullptr && fast->next != nullptr ){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *tmp = slow->next;
        slow->next = nullptr;
        ListNode *left = sortList(head);
        ListNode *right = sortList(tmp);
        ListNode *h = new ListNode(0);
        // merge
        ListNode *t = h;
        while(left != nullptr && right != nullptr){
            if( left->val > right->val ){
                t->next = right;
                right = right->next;
                t = t->next;
            }else{
                t->next = left;
                left = left->next;
                t = t->next;
            }
        }
        t->next = left != nullptr ? left : right;
        return h->next;
    }
};
problem 2:
https://leetcode-cn.com/problems/intersection-of-two-arrays/
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
                  if( nums1.empty() || nums2.empty() )
                    return vector<int>();
                  vector<int> result;
                  sort(nums1.begin(),nums1.end());
                  sort(nums2.begin(),nums2.end());
                  set_intersection(nums1.begin(),nums1.end(),nums2.begin(),nums2.end(),back_inserter(result));
                  auto last = unique(result.begin(),result.end());
                  result.erase(last,result.end());
                  return result;
    }
};

Review
https://medium.com/netflix-techblog/data-compression-for-large-scale-streaming-experimentation-c20bfab8b9ce
本文详细阐述了数据压缩在大规模流媒体实现中的重要性，并且其中还提到一些具体针对数据压缩方面可行的方法，比如“Quantile 
Bootstrap”和“Rare Event Bootstrap”等。此外本篇中还提到一种有效的压缩机制，具体可见本篇文章中的具体细节，不再赘述。

Tip
调整内核printk的打印级别对于串口调试来说十分重要。
具体使用技巧可见:
https://blog.csdn.net/wjflyhigh/article/details/8845363

Share
Linux学习笔记：
https://blog.csdn.net/qq_40073459/article/details/103723124
