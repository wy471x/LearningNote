Algorithm
https://leetcode-cn.com/problems/binary-tree-level-order-traversal/submissions/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root == nullptr)
            return vector<vector<int>>();
        queue<TreeNode *>que;
        que.push(root);
        int level = 0;
        vector<vector<int>> result;
        while(!que.empty()){
            vector<int> tmp;
            int size = que.size();
            while(size--){
                TreeNode *element = que.front();
                que.pop();
                tmp.push_back(element->val);
                if(element->left != nullptr)
                    que.push(element->left);
                if(element->right != nullptr)
                    que.push(element->right);
            }
            result.push_back(tmp);
        }
        return result;
    }
};

Review
https://netflixtechblog.com/android-rx-onerror-guidelines-e68e8dc7383f
Rx onError Guidelines
这篇文章简述了对于一些对Rx中的API的使用向导，目的是帮助开发者去创建出一致性和感知性的API
分别从保持一致性、避免业务逻辑以及传递细节等方面对创建更好的API提出了实质性建议

Tip
Linux命令
https://blog.csdn.net/qq_40073459/article/details/104025442

Share
Android学习笔记
https://blog.csdn.net/qq_40073459/article/details/104032415
